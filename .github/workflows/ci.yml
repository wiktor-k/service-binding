name: CI

on: pull_request

jobs:
  # Use the following command to fix words locally:
  # codespell --ignore-words-list "ser,crate,daa,keypair" --skip "*/target,*-sys" --write-changes
  check-spelling:
    name: Check spelling
    runs-on: ubuntu-latest
    steps:
      - name: Check spelling
        uses: codespell-project/actions-codespell@master
        with:
          ignore_words_list: "ser,crate,daa,keypair"
          path: tss-esapi
          skip: "*/target,*-sys"

  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check formatting
        run: cargo fmt --all -- --check

  tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          toolchain: stable
          target: i686-unknown-linux-gnu
        - os: ubuntu-latest
          toolchain: stable
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          toolchain: beta
          target: i686-unknown-linux-gnu
        - os: ubuntu-latest
          toolchain: beta
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          toolchain: nightly
          target: i686-unknown-linux-gnu
        - os: ubuntu-latest
          toolchain: nightly
          target: x86_64-unknown-linux-gnu
        - os: macos-latest
          toolchain: stable
          target: x86_64-apple-darwin
        - os: macos-latest
          toolchain: stable
          target: x86_64-apple-ios
        - os: macos-latest
          toolchain: beta
          target: x86_64-apple-darwin
        - os: macos-latest
          toolchain: beta
          target: x86_64-apple-ios
        - os: macos-latest
          toolchain: nightly
          target: x86_64-apple-darwin
        - os: macos-latest
          toolchain: nightly
          target: x86_64-apple-ios
        - os: windows-latest
          toolchain: stable-msvc
          target: i686-pc-windows-msvc
        - os: windows-latest
          toolchain: stable-msvc
          target: x86_64-pc-windows-msvc
        - os: windows-latest
          toolchain: beta-msvc
          target: i686-pc-windows-msvc
        - os: windows-latest
          toolchain: beta-msvc
          target: x86_64-pc-windows-msvc
        - os: windows-latest
          toolchain: nightly-msvc
          target: i686-pc-windows-msvc
        - os: windows-latest
          toolchain: nightly-msvc
          target: x86_64-pc-windows-msvc
        - os: windows-latest
          toolchain: stable-gnu
          target: i686-pc-windows-gnu
        - os: windows-latest
          toolchain: stable-gnu
          target: x86_64-pc-windows-gnu
        - os: windows-latest
          toolchain: beta-gnu
          target: i686-pc-windows-gnu
        - os: windows-latest
          toolchain: beta-gnu
          target: x86_64-pc-windows-gnu
        - os: windows-latest
          toolchain: nightly-gnu
          target: i686-pc-windows-gnu
        - os: windows-latest
          toolchain: nightly-gnu
          target: x86_64-pc-windows-gnu
    steps:
      - uses: actions-rs/toolchain@v1
        name: Install toolchain
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          override: true
      - uses: actions/checkout@v2
      - name: Build
        run: cargo build --verbose --all
      - name: Test
        run: cargo test --verbose --all -- --nocapture --test-threads=1
      - name: Generate docs
        run: cargo doc

  code-coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install code coverage tool
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
      - name: Collect code coverage
        run: cargo tarpaulin --out Xml -- --test-threads=1
      - name: Upload code coverage
        uses: codecov/codecov-action@v2

  valgrind:
    name: Valgrind
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install valgrind
        run: sudo apt-get install valgrind
      - name: Install cargo-valgrind
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-valgrind
          version: latest
      - name: Run valgrind tests
        run: cargo valgrind test

  lints:
    name: Clippy lints
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: actions/checkout@v2
      - name: Check for lints
        run: cargo clippy -- -D warnings
